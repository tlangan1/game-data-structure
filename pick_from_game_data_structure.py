# A relatively simple text-based game that uses a data structure to store the game's nodes.
# The game should be able to navigate between nodes based on user input and state.

import sys
import curses
window = curses.initscr() # Initialize the library. Returns a WindowObject which represents the whole screen.
window.keypad(True) # Escape sequences generated by some keys (keypad, function keys) will be interpreted by curses.
curses.cbreak() # Keys are read one by one. Also safer than curses.raw() because you can still interrupt a running script with hotkeys.
curses.noecho() # Prevent getch() keys from being visible when pressed. Echoing of input characters is turned off.

from check_key_mappings import checkKeyMappingsMessage

checkKeyMappingsMessage()

from initialize_colors import black, white

def display_menu(window):
    selectedIndex = 0

    node = list(game_nodes.keys())[0]
    while True:
        window.clear()
        window.addstr(node + '\n', curses.A_UNDERLINE)
        for question in game_nodes[node]:
            window.addstr(question + ':\n', curses.A_UNDERLINE)
            menu_option_count = 0
            for answer in game_nodes[node][question]:
                # Uncolored line number.
                window.addstr('{}. '.format(menu_option_count + 1))
                # Colored menu option.
                window.addstr(answer["answer"] + '\n', black if menu_option_count == selectedIndex else white)
                menu_option_count += 1
            c = window.getch()

            if c == curses.KEY_UP or c == curses.KEY_LEFT:
                # Loop around backwards.
                selectedIndex = (selectedIndex - 1 + menu_option_count) % menu_option_count

            elif c == curses.KEY_DOWN or c == curses.KEY_RIGHT:
                # Loop around forwards.
                selectedIndex = (selectedIndex + 1) % menu_option_count

            # If curses.nonl() is called, Enter key = \r else \n.
            elif c == curses.KEY_ENTER or chr(c) in '\r\n':

                if game_nodes[node][question] == []:
                    sys.exit()
                window.addstr('\nYou choose {}\n'.format(game_nodes[node][question][selectedIndex]))
                window.addstr('\nPress enter to continue\n')
                window.getch()
                node = game_nodes[node][question][selectedIndex]["node"]

            else:
                window.addstr("\nThe pressed key '{}' {} is not associated with a menu function.\n".format(chr(c), c))
                window.getch()

from game_nodes import game_nodes


if __name__ == '__main__':
    display_menu(window)
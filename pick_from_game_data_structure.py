# This code is not primarily what I wrote it is what Copilot wrote. It needs to be reviewed and fixed.
# The goal is just to create a relatively simple text-based game that uses a data structure to store the game's nodes.
# The game should be able to navigate between nodes based on user input.

import sys
import curses
window = curses.initscr() # Initialize the library. Returns a WindowObject which represents the whole screen.
window.keypad(True) # Escape sequences generated by some keys (keypad, function keys) will be interpreted by curses.
curses.cbreak() # Keys are read one by one. Also safer than curses.raw() because you can still interrupt a running script with hotkeys.
curses.noecho() # Prevent getch() keys from being visible when pressed. Echoing of input characters is turned off.

window.addstr("__name__:" + __name__ + "\n")

# *******************************************************************************
# *** Kludge *** 
# *******************************************************************************
# The keyboard mappings in windows command shell are different from those in Git Bash.
# To be able to run this script in both Bash and CMD I prompt the user to hit the Page Up key
# and then overwrite the curses mappings in the event that the mapping is not what the script expects.
# This is a kludge, but it works.

window.addstr('Press the Page Up key to check the key mappings.\n')
pageUpKeyValue = window.getch()

if pageUpKeyValue != curses.KEY_UP:
    curses.KEY_UP = curses.KEY_A2
    curses.KEY_LEFT = curses.KEY_B1
    curses.KEY_DOWN = curses.KEY_C2
    curses.KEY_RIGHT = curses.KEY_B3
# *******************************************************************************
# *** End of the kludge ***
# *******************************************************************************

# Initialize colors.
curses.start_color() # Must be called if the programmer wants to use colors.
curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLACK)
black = curses.color_pair(1)
white = curses.color_pair(2)

def display_menu(window):
    selectedIndex = 0

    node = list(game_nodes.keys())[0]
    while True:
        window.clear()
        window.addstr(node + '\n', curses.A_UNDERLINE)
        for question in game_nodes[node]:
            # print(question)
            window.addstr(question + ':\n', curses.A_UNDERLINE)
            menu_option_count = 0
            for answer in game_nodes[node][question]:
                # print(answer)
                # print(answer["answer"])
                # print(answer["node"])
                # Uncolored line number.
                window.addstr('{}. '.format(menu_option_count + 1))
                # Colored menu option.
                window.addstr(answer["answer"] + '\n', black if menu_option_count == selectedIndex else white)
                menu_option_count += 1
            # for node in game_nodes:
            #     # Uncolored line number.
            #     window.addstr('{}. '.format(i + 1))
            #     # Colored menu option.
            #     window.addstr(node + '\n', black if i == selectedIndex else white)
            #     i += 1
            c = window.getch()

            if c == curses.KEY_UP or c == curses.KEY_LEFT:
                # Loop around backwards.
                selectedIndex = (selectedIndex - 1 + menu_option_count) % menu_option_count

            elif c == curses.KEY_DOWN or c == curses.KEY_RIGHT:
                # Loop around forwards.
                selectedIndex = (selectedIndex + 1) % menu_option_count

            # If curses.nonl() is called, Enter key = \r else \n.
            elif c == curses.KEY_ENTER or chr(c) in '\r\n':
                # If the last option, exit, is selected.
                # if selectedIndex == menu_option_count - 1:
                #     curses.endwin() # De-initialize the library, and return terminal to normal status.    <-- Works without this on Windows, however in Linux you can't type in the terminal after exiting without this :P
                #     break

                if game_nodes[node][question] == []:
                    sys.exit()
                window.addstr('\nYou choose {}\n'.format(game_nodes[node][question][selectedIndex]))
                window.addstr('\nPress enter to continue\n')
                window.getch()
                node = game_nodes[node][question][selectedIndex]["node"]

            else:
                window.addstr("\nThe pressed key '{}' {} is not associated with a menu function.\n".format(chr(c), c))
                window.getch()

from game_nodes import game_nodes


if __name__ == '__main__':
    display_menu(window)